p
    | Diagrams: <a href="http://rxmarbles.com/">http://rxmarbles.com/</a>
    br
    | Official docs: <a href="http://reactivex.io/rxjs/manual/overview.html#introduction">http://reactivex.io/rxjs/manual/overview.html#introduction</a>

h2 Combination operators
div
    h3((click)="toggleImage('.combine-latest');") combineLatest
    span(*ngFor="let item of combineLatest") [{{ item }}]
img.diagram.combine-latest(src="https://rxjs-dev.firebaseapp.com/assets/images/marble-diagrams/combineLatest.png")
p When any observable emits a value, emit the last emitted value from each (but after both (all) observables emit at least 1 value)

div
    h3((click)="toggleImage('.concat');") Concat
    span(*ngFor="let item of concat") [{{ item }}]
img.diagram.concat(src="https://rxjs-dev.firebaseapp.com/assets/images/marble-diagrams/concat.png")
p Emit events from first observable, after it is completed start emiting only from second, ...

div
    h3((click)="toggleImage('.merge');") Merge
    span(*ngFor="let item of merge") [{{ item }}]
img.diagram.merge(src="https://rxjs-dev.firebaseapp.com/assets/images/marble-diagrams/merge.png")
p Emit events from both observabels!!!

div
    h3((click)="toggleImage('.race');") Race
    span(*ngFor="let item of race") [{{ item }}]
img.diagram.race(src="https://i.imgur.com/wrxWrNL.png")
p Return event from observable which first begin to emit values

div
    h3((click)="toggleImage('.with-latest-from');") WithLatestFrom
    span(*ngFor="let item of withLatestFrom") [{{ item }}]
img.diagram.with-latest-from(src="https://rxjs-dev.firebaseapp.com/assets/images/marble-diagrams/withLatestFrom.png")
p Emit values from both observables only when first is emitting (but after both (all) observables emit at least 1 value)

div
    h3((click)="toggleImage('.zip');") Zip
    span(*ngFor="let item of zip") [{{ item }}]
img.diagram.zip(src="https://miro.medium.com/max/1895/1*6C5LCqGboEn2DjiANbn-gQ.png")
p Emit values from both observers, n-th value from faster observer, then n-th value from slower observer

div
    h3((click)="toggleImage('.fork-join');") ForkJoin
    span(*ngFor="let item of forkJoin") [{{ item }}]
img.diagram.zip(src="https://rxjs-dev.firebaseapp.com/assets/images/marble-diagrams/forkJoin.png")
p When all observables complete, emit the last emitted value from each, equvalent to Promise.all (do in <span style="color: red; font-weight: bold;">parallel</span>)


p
    | First:
    input(type="text", name="first")
    input(type="button", id="completeFirst", value="Complete")
    br
    | Second:
    input(type="text", name="second")
    input(type="button", id="completeSecond", value="Complete")

h2 Transformation operators

div
    h3((click)="toggleImage('.buffer');") Buffer
    span(*ngFor="let item of buffer") [{{ item }}]
img.diagram.buffer(src="https://rxjs-dev.firebaseapp.com/assets/images/marble-diagrams/buffer.png")
p Store values from first observer and emit them then second observer emit

div
    h3((click)="toggleImage('.concat-map');") ConcatMap
    span(*ngFor="let item of concatMap") [{{ item }}]
img.diagram.concat-map(src="https://rxjs-dev.firebaseapp.com/assets/images/marble-diagrams/concatMap.png")
p On first emit of first observer (first emit from sequence), we subscribe for second observer (<span style="color: red; font-weight: bold;">sequentially</span>) and can use data from first one


div
    h3((click)="toggleImage('.merge-map');") MergeMap (FlatMap)
    span(*ngFor="let item of mergeMap") [{{ item }}]
img.diagram.merge-map(src="https://rxjs-dev.firebaseapp.com/assets/images/marble-diagrams/mergeMap.png")
p Combines event from first observable with all passed events from second.

div
    h3((click)="toggleImage('.switch-map');") SwitchMap
    span(*ngFor="let item of switchMap") [{{ item }}]
img.diagram.switch-map(src="https://rxjs-dev.firebaseapp.com/assets/images/marble-diagrams/switchMap.png")
p On first emit of first observer (last emit from sequence), we subscribe for second observer (<span style="color: red; font-weight: bold;">sequentially</span>) and can use data from first one
